openapi: 3.0.3
info:
  title: User Management API
  version: 1.0.0
  description: API for managing system users
servers:
  - url: /api
tags:
  - name: Users
    description: User management and retrieval
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: objectId
        name:
          type: string
        email:
          type: string
          format: email
        role:
          $ref: '#/components/schemas/Role'
        status:
          type: string
          enum: [Active, Inactive, Suspended, OnLeave, Pending]
        employee:
          type: string
          format: objectId
          nullable: true
        isEmailVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - email
        - role
        - status
    Role:
      type: object
      properties:
        id:
          type: string
          format: objectId
        name:
          type: string
    PaginatedUsers:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
        page:
          type: integer
        limit:
          type: integer
        totalPages:
          type: integer
        totalResults:
          type: integer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: Missing or invalid authentication
    Forbidden:
      description: Insufficient permissions
    NotFound:
      description: Resource not found
    DuplicateEmail:
      description: Email address already in use
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Email already taken

paths:
  /users:
    post:
      summary: Create a user
      description: Only admins can create other users
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
              required:
                - name
                - email
                - password
                - role
              properties:
                password:
                  type: string
                  format: password
                  minLength: 8
              example:
                name: John Doe
                email: john@example.com
                password: Password123
                role: 6391ae45e9b8d950f0b3b1a1
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/DuplicateEmail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    get:
      summary: Get all users
      description: Only admins can retrieve all users
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NameFilter'
        - $ref: '#/components/parameters/RoleFilter'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/ProjectBy'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Paginated users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /users/{userId}:
    get:
      summary: Get user by ID
      description: Logged in users can fetch only their own information
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Update user
      description: Logged in users can update their own information
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/DuplicateEmail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete user
      description: Only admins can delete users
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: User deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/by-employee:
    get:
      summary: Get users by employee association
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: query
          schema:
            type: string
            format: objectId
          description: Employee ID (omit to get unassigned users)
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  parameters:
    UserId:
      name: userId
      in: path
      required: true
      schema:
        type: string
        format: objectId
    NameFilter:
      name: name
      in: query
      schema:
        type: string
    RoleFilter:
      name: role
      in: query
      schema:
        type: string
    SortBy:
      name: sortBy
      in: query
      schema:
        type: string
    ProjectBy:
      name: projectBy
      in: query
      schema:
        type: string
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        default: 10
    Page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1